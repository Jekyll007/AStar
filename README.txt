Алгоритм поиска пути "A*".
Реализация на Python.

В качестве входных данных имеем изображение, представляющее карту препятствий. Белый цвет считается проходимым, чёрный - препятствием.
Задача: найти кратчайший путь между двумя точками, указанными на изображении
На выходе получаем траекторию пути.
Траектория может поворачивать только на прямой угол.

Для реализации поиска пути увеличивается отступ от препятствий на половину ширины/длины агента, на изображение накладывается сетка определённого размера, каждая ячейка которой анализируется на возможность прохождения. После чего строится карта обнаруженных препятствий, которая используется алгоритмом A* для их обхода. По результатам работы A* расчитывается путь между двумя точками. 
Результаты всех операций отображаются графически.

Управление программой:
ЛКМ - стартовая точка, ПКМ - целевая точка.
Для построения пути точки можно ставить только на светлые (проходимые) поля.
m - смена режима программы (поиск пути / рисование карты препятствий).
Опции режима рисования:
	ЛКМ - рисование;
	c - очистка поля для рисования;
	- - уменьшение размера кисти для рисования на 1 px;
	= - увеличение размера кисти для рисования на 1 px (максимум - 50 px);
	w - установка белого цвета кисти;
	b - установка черного цвета кисти;
Esc - завершение программы.
В верхней части окна можно изменять параметры анализа изображения.
Grid: регулирует размер сетки в px (5 ~ 50). 
Object: размер объекта в px (0 ~ 50).
Thresh: порог для анализа препятствий ("средний" цвет ячейки сетки, 0 ~ 255).
В качестве карты по умолчанию используется изображение "maze.png". Если оно отсутствует, создаётся изображение белого цвета размером 800 х 400 px.

--------------------------------------------------------
ЗАДАЧИ:
I:
	1. Анализ ячейки на проходимость:
	От центра проверяемой ячейки отложить размер агента и посмотреть задевает ли он препятствие. Исходя из этого делать вывод о проходимости проверяемой ячейки.
	2. Интерфейс загрузки изображения.
	3. Возможность изменять размеры поля.
	[4. Возможность перемещения по диагонали.]

II:
	1. Генерация команд агенту для прохождения поля.
	Допустим, что агент представлен мобильным роботом, а изображение - карта реального поля с препятствиями. Агент имеет возможность двигаться с постоянной скоростью. Управлять и можно включая двигатели правого и левого колеса как по отдельности, так и одновременно. Команды будут выглядеть следующим образом: "FORWARD: 10sec" (движение вперёд), "LEFT: 5sec", "RIGHT 5sec" (повороты).
	2. Анимация движения агента с использованием команд как входные данные.
	3. Возможность перемещать объект указав несколько точек, последовательно посещая каждую.

III:
	1. Генерация полигональной сетки.
	Нахождение границ препятствий средствами OpenCV. Аппроксимация их до многоугольника. Составление графа с весами из вершин препятствий. Обход графа A*.
	2. Введение различных поверхностей разной проходимости.


